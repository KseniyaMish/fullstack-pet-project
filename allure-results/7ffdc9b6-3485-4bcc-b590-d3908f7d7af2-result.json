{"name": "Cleanup keeps only the latest post after exceeding limit", "status": "broken", "statusDetails": {"message": "KeyError: 0", "trace": "@allure.feature(\"Posts Cleanup\")\n    @allure.title(\"Cleanup keeps only the latest post after exceeding limit\")\n    def test_cleanup_after_20_posts():\n        with step_request(\"GET /posts-db/ — get current posts\"):\n            r = requests.get(f\"{BASE_URL}/posts-db/\", timeout=5)\n            attach_response(r)\n            existing = r.json()\n            count = len(existing)\n    \n        with step_validate_body():\n            assert count <= 21, f\"Слишком много записей в базе: {count}. Очистка не работает.\"\n    \n        if count < 20:\n            to_create = 20 - count\n            for i in range(to_create):\n                requests.post(f\"{BASE_URL}/posts-db/\", params={\"title\": f\"Filler {i}\", \"content\": \"...\"}, timeout=5)\n    \n        with step_request(\"POST 21-й пост → триггер очистку\"):\n            r = requests.post(f\"{BASE_URL}/posts-db/\", params={\"title\": \"Survivor\", \"content\": \"Will remain\"}, timeout=5)\n            attach_response(r)\n            assert r.status_code == 200\n    \n        with step_request(\"GET /posts-db/ — validate cleanup\"):\n            r = requests.get(f\"{BASE_URL}/posts-db/\", timeout=5)\n            attach_response(r)\n            posts = r.json()\n    \n        with step_validate_body():\n            assert len(posts) == 1, \"После очистки должен остаться только один пост\"\n>           assert posts[0][\"title\"] == \"Survivor\"\n                   ^^^^^^^^\nE           KeyError: 0\n\ntests\\test_post_cleanup_db.py:36: KeyError"}, "steps": [{"name": "Send request: GET /posts-db/ — get current posts", "status": "passed", "attachments": [{"name": "Status Code", "source": "171bbee4-f768-4ecc-94c4-eab5467136cd-attachment.txt", "type": "text/plain"}, {"name": "Response Body", "source": "a5bcca09-a3a3-4127-babf-e458806e88ca-attachment.json", "type": "application/json"}], "start": 1753782873288, "stop": 1753782875332}, {"name": "Validate response body content", "status": "passed", "start": 1753782875332, "stop": 1753782875332}, {"name": "Send request: POST 21-й пост → триггер очистку", "status": "passed", "attachments": [{"name": "Status Code", "source": "73044aae-22cf-45d5-ac6a-bf6da136166d-attachment.txt", "type": "text/plain"}, {"name": "Response Body", "source": "8eea2182-9ddb-4d41-b511-a39b92f7ef5c-attachment.json", "type": "application/json"}], "start": 1753782914259, "stop": 1753782916314}, {"name": "Send request: GET /posts-db/ — validate cleanup", "status": "passed", "attachments": [{"name": "Status Code", "source": "a373d2b9-1ae3-4178-a9b0-edc00824d09c-attachment.txt", "type": "text/plain"}, {"name": "Response Body", "source": "c19cffc7-e7f9-4c7d-b243-1343134b212a-attachment.json", "type": "application/json"}], "start": 1753782916314, "stop": 1753782918340}, {"name": "Validate response body content", "status": "broken", "statusDetails": {"message": "KeyError: 0\n", "trace": "  File \"C:\\Users\\kmish\\Desktop\\projects\\fullstack_pet_project\\tests\\test_post_cleanup_db.py\", line 36, in test_cleanup_after_20_posts\n    assert posts[0][\"title\"] == \"Survivor\"\n           ~~~~~^^^\n"}, "start": 1753782918340, "stop": 1753782918340}], "start": 1753782873287, "stop": 1753782918341, "uuid": "4443cfba-4594-4c0c-9252-b9aeb2d7a7b4", "historyId": "8012c354e7dda521bc04d7853c3a1297", "testCaseId": "8012c354e7dda521bc04d7853c3a1297", "fullName": "tests.test_post_cleanup_db#test_cleanup_after_20_posts", "labels": [{"name": "feature", "value": "Posts Cleanup"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_post_cleanup_db"}, {"name": "host", "value": "LAPTOP-IKM1QBQF"}, {"name": "thread", "value": "11532-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_post_cleanup_db"}], "titlePath": ["tests", "test_post_cleanup_db.py"]}