{"name": "Cleanup keeps only the latest post after exceeding limit", "status": "broken", "statusDetails": {"message": "KeyError: 0", "trace": "@allure.feature(\"Posts Cleanup\")\n    @allure.title(\"Cleanup keeps only the latest post after exceeding limit\")\n    def test_cleanup_after_20_posts():\n        with step_request(\"GET /posts-db/ — get current posts\"):\n            r = requests.get(f\"{BASE_URL}/posts-db/\", timeout=5)\n            attach_response(r)\n            existing = r.json()\n            count = len(existing)\n    \n        with step_validate_body():\n            assert count <= 21, f\"Слишком много записей в базе: {count}. Очистка не работает.\"\n    \n        if count < 20:\n            to_create = 20 - count\n            for i in range(to_create):\n                requests.post(f\"{BASE_URL}/posts-db/\", params={\"title\": f\"Filler {i}\", \"content\": \"...\"}, timeout=5)\n    \n        with step_request(\"POST 21-й пост → триггер очистку\"):\n            r = requests.post(f\"{BASE_URL}/posts-db/\", params={\"title\": \"Survivor\", \"content\": \"Will remain\"}, timeout=5)\n            attach_response(r)\n            assert r.status_code == 200\n    \n        with step_request(\"GET /posts-db/ — validate cleanup\"):\n            r = requests.get(f\"{BASE_URL}/posts-db/\", timeout=5)\n            attach_response(r)\n            posts = r.json()\n    \n        with step_validate_body():\n            assert len(posts) == 1, \"После очистки должен остаться только один пост\"\n>           assert posts[0][\"title\"] == \"Survivor\"\n                   ^^^^^^^^\nE           KeyError: 0\n\ntests\\test_post_cleanup_db.py:36: KeyError"}, "steps": [{"name": "Send request: GET /posts-db/ — get current posts", "status": "passed", "attachments": [{"name": "Status Code", "source": "c01e08c5-fe3d-4caa-8c56-8ae52ef479c0-attachment.txt", "type": "text/plain"}, {"name": "Response Body", "source": "13b20175-5904-4c0a-90e2-397f18e758e6-attachment.json", "type": "application/json"}], "start": 1753783543201, "stop": 1753783545257}, {"name": "Validate response body content", "status": "passed", "start": 1753783545257, "stop": 1753783545257}, {"name": "Send request: POST 21-й пост → триггер очистку", "status": "passed", "attachments": [{"name": "Status Code", "source": "0ab6a8e0-8c98-486d-9ab9-87120692ea3f-attachment.txt", "type": "text/plain"}, {"name": "Response Body", "source": "1c51c5ae-5df6-4c2a-9f00-cc22ec0d3683-attachment.json", "type": "application/json"}], "start": 1753783584248, "stop": 1753783586301}, {"name": "Send request: GET /posts-db/ — validate cleanup", "status": "passed", "attachments": [{"name": "Status Code", "source": "1dbadde0-6c47-4f4d-8afc-2c84caba5202-attachment.txt", "type": "text/plain"}, {"name": "Response Body", "source": "3c71bd21-1d99-40e8-b2c7-2b999e980d29-attachment.json", "type": "application/json"}], "start": 1753783586302, "stop": 1753783588343}, {"name": "Validate response body content", "status": "broken", "statusDetails": {"message": "KeyError: 0\n", "trace": "  File \"C:\\Users\\kmish\\Desktop\\projects\\fullstack_pet_project\\tests\\test_post_cleanup_db.py\", line 36, in test_cleanup_after_20_posts\n    assert posts[0][\"title\"] == \"Survivor\"\n           ~~~~~^^^\n"}, "start": 1753783588343, "stop": 1753783588343}], "start": 1753783543201, "stop": 1753783588344, "uuid": "bd1364c6-6eb4-400c-9b1a-3cb6c2bd9ebe", "historyId": "8012c354e7dda521bc04d7853c3a1297", "testCaseId": "8012c354e7dda521bc04d7853c3a1297", "fullName": "tests.test_post_cleanup_db#test_cleanup_after_20_posts", "labels": [{"name": "feature", "value": "Posts Cleanup"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_post_cleanup_db"}, {"name": "host", "value": "LAPTOP-IKM1QBQF"}, {"name": "thread", "value": "23668-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_post_cleanup_db"}], "titlePath": ["tests", "test_post_cleanup_db.py"]}